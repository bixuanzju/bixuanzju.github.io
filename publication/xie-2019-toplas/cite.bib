@article{xie-2019-toplas,
author = {Xie, Ningning and Bi, Xuan and Oliveira, Bruno C. D. S. and Schrijvers, Tom},
title = {Consistent Subtyping for All},
year = {2019},
issue_date = {January 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {42},
number = {1},
issn = {0164-0925},
url = {https://doi.org/10.1145/3310339},
doi = {10.1145/3310339},
abstract = {Consistent subtyping is employed in some gradual type systems to validate type conversions. The original definition by&nbsp;Siek and Taha serves as a guideline for designing gradual type systems with subtyping. Polymorphic types \`{a} la System F also induce a subtyping relation that relates polymorphic types to their instantiations. However, Siek and Taha’s definition is not adequate for polymorphic subtyping. The first goal of this article is to propose a generalization of consistent subtyping that is adequate for polymorphic subtyping and subsumes the original definition by&nbsp;Siek and Taha. The new definition of consistent subtyping provides novel insights with respect to previous polymorphic gradual type systems, which did not employ consistent subtyping. The second goal of this article is to present a gradually typed calculus for implicit (higher-rank) polymorphism that uses our new notion of consistent subtyping. We develop both declarative and (bidirectional) algorithmic versions for the type system. The algorithmic version employs techniques developed by&nbsp;Dunfield and Krishnaswami for higher-rank polymorphism to deal with instantiation. We prove that the new calculus satisfies all static aspects of the refined criteria for gradual typing. We also study an extension of the type system with static and gradual type parameters, in an attempt to support a variant of the dynamic criterion for gradual typing. Assuming a coherence conjecture for the extended calculus, we show that the dynamic gradual guarantee of our source language can be reduced to that of λ B, which, at the time of writing, is still an open question. Most of the metatheory of this article, except some manual proofs for the algorithmic type system and extensions, has been mechanically formalized using the Coq proof assistant.},
journal = {ACM Trans. Program. Lang. Syst.},
month = nov,
articleno = {2},
numpages = {79},
keywords = {implicit polymorphism, Gradual typing, consistent subtyping, dynamic gradual guarantee}
}
